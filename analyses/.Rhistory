sep = "~")), data = data)
#plot(resid(Zn_soil_lm) ~ fitted(Zn_soil_lm))
anova(Zn_soil_lm)
cld(emmeans(Zn_soil_lm, ~elevation_fac * fire))
ggplot(data = data, aes(x = Name, y = (Zn_soil))) +
geom_boxplot()
### pH
pH_lm = lm(as.formula(paste(dep_variables[22],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(pH_lm) ~ fitted(pH_lm))
anova(pH_lm)
cld(emmeans(pH_lm, ~elevation_fac * fire))
ggplot(data = data, aes(x = Name, y = (pH))) +
geom_boxplot()
### CEC
CEC_lm = lm(as.formula(paste(dep_variables[23],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(CEC_lm) ~ fitted(CEC_lm))
anova(CEC_lm)
cld(emmeans(CEC_lm, ~elevation_fac * fire))
ggplot(data = data, aes(x = Name, y = (CEC))) +
geom_boxplot()
### C_soil
C_soil_lm = lm(as.formula(paste(dep_variables[24],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(C_soil_lm) ~ fitted(C_soil_lm))
anova(C_soil_lm)
cld(emmeans(C_soil_lm, ~elevation_fac * fire))
ggplot(data = data, aes(x = Name, y = (C_soil))) +
geom_boxplot()
### N_soil
N_soil_lm = lm(as.formula(paste(dep_variables[25],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(N_soil_lm) ~ fitted(N_soil_lm))
anova(N_soil_lm)
cld(emmeans(N_soil_lm, ~elevation_fac * fire))
ggplot(data = data, aes(x = Name, y = (N_soil))) +
geom_boxplot()
### CN_soil
CN_soil_lm = lm(as.formula(paste(dep_variables[26],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(CN_soil_lm) ~ fitted(CN_soil_lm))
anova(CN_soil_lm)
cld(emmeans(CN_soil_lm, ~elevation_fac * fire))
ggplot(data = data, aes(x = Name, y = (CN_soil))) +
geom_boxplot()
### retention
retention_lm = lm(as.formula(paste(dep_variables[27],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(retention_lm) ~ fitted(retention_lm))
anova(retention_lm)
cld(emmeans(retention_lm, ~elevation_fac * fire))
ggplot(data = data, aes(x = Name, y = (retention))) +
geom_boxplot()
## tables
### soil organics
summary(anova(CN_soil_lm))
anova(CN_soil_lm)
## tables
### soil organics
anova(C_soil_lm)[, c(1)]
## tables
### soil organics
anova(C_soil_lm)[, c(1, 4, 5)]
## tables
### soil organics
as.matrix(anova(C_soil_lm)[, c(1, 4, 5)])
## tables
### soil organics
cbind(as.matrix(anova(C_soil_lm)[, c(1, 4, 5)]), as.matrix(anova(N_soil_lm)[, c(1, 4, 5)]))
## tables
### soil organics
cbind(as.matrix(anova(C_soil_lm)[, c(1, 4, 5)]),
as.matrix(anova(N_soil_lm)[, c(4, 5)]),
as.matrix(anova(CN_soil_lm)[, c(4, 5)]))
## tables
### soil organics
write.csv(cbind(as.matrix(anova(C_soil_lm)[, c(1, 4, 5)]),
as.matrix(anova(N_soil_lm)[, c(4, 5)]),
as.matrix(anova(CN_soil_lm)[, c(4, 5)])),
'tables/soil_organics.csv')
anova(C_soil_lm)
emmeans(C_soil_lm, ~fire)
(summary(emmeans(C_soil_lm, ~fire))[1,2] - summary(emmeans(C_soil_lm, ~fire))[2,2])/ summary(emmeans(C_soil_lm, ~fire))[2,2]
emmeans(C_soil_lm, ~elevation)
emmeans(C_soil_lm, ~elevation_fac)
(summary(emmeans(C_soil_lm, ~elevation_fac))[1,2] - summary(emmeans(C_soil_lm, ~elevation_fac))[2,2])/ summary(emmeans(C_soil_lm, ~elevation_fac))[2,2]
(summary(emmeans(CN_soil_lm, ~elevation_fac))[1,2] - summary(emmeans(CN_soil_lm, ~elevation_fac))[2,2])/ summary(emmeans(CN_soil_lm, ~elevation_fac))[2,2]
write.csv(cbind(as.matrix(anova(Ca_soil_lm)[, c(1, 4, 5)]),
as.matrix(anova(P_soil_lm)[, c(4, 5)]),
as.matrix(anova(K_soil_lm)[, c(4, 5)]),
as.matrix(anova(Mg_soil_lm)[, c(4, 5)]),
as.matrix(anova(Al_soil_lm)[, c(4, 5)]),
as.matrix(anova(Zn_soil_lm)[, c(4, 5)])),
'tables/soil_inorganics.csv')
cbind(as.matrix(anova(Ca_soil_lm)[, c(1, 4, 5)]),
as.matrix(anova(P_soil_lm)[, c(4, 5)]),
as.matrix(anova(K_soil_lm)[, c(4, 5)]),
as.matrix(anova(Mg_soil_lm)[, c(4, 5)]),
as.matrix(anova(Al_soil_lm)[, c(4, 5)]),
as.matrix(anova(Zn_soil_lm)[, c(4, 5)]))
(summary(emmeans(K_soil_lm, ~fire))[1,2] - summary(emmeans(K_soil_lm, ~fire))[2,2])/ summary(emmeans(K_soil_lm, ~fire))[2,2]
(summary(emmeans(Ca_soil_lm, ~elevation_fac))[1,2] - summary(emmeans(Ca_soil_lm, ~elevation_fac))[2,2])/ summary(emmeans(Ca_soil_lm, ~elevation_fac))[2,2]
retentionl_lm
retention_lm
write.csv(as.matrix(anova(retention_lm)[, c(1, 4, 5)]),
'tables/retention.csv')
C_foliar_lm
d13C_foliar_lm
d13C_lm
write.csv(cbind(as.matrix(anova(C_foliar_lm)[, c(1, 4, 5)]),
as.matrix(anova(N_foliar_lm)[, c(4, 5)]),
as.matrix(anova(CN_foliar_lm)[, c(4, 5)]),
as.matrix(anova(d13C_lm)[, c(1, 4, 5)]),
as.matrix(anova(d15N_lm)[, c(4, 5)])),
'tables/foliar_cn.csv')
anova(C_foliar_lm)
anova(N_foliar_lm)
anova(CN_foliar_lm)
anova(d13C_lm)
write.csv(cbind(as.matrix(anova(C_foliar_lm)[, c(1, 4, 5)]),
as.matrix(anova(N_foliar_lm)[, c(4, 5)]),
as.matrix(anova(CN_foliar_lm)[, c(4, 5)])),
'tables/foliar_cn.csv')
write.csv(cbind(as.matrix(anova(d13C_lm)[, c(1, 4, 5)]),
as.matrix(anova(d15N_lm)[, c(4, 5)])),
'tables/foliar_isotope.csv')
(summary(emmeans(d13C_lm, ~elevation_fac))[1,2] - summary(emmeans(d13C_lm, ~elevation_fac))[2,2])/ summary(emmeans(d13C_lm, ~elevation_fac))[2,2]
write.csv(cbind(as.matrix(anova(Ca_foliar_lm)[, c(1, 4, 5)]),
as.matrix(anova(P_foliar_lm)[, c(4, 5)]),
as.matrix(anova(K_foliar_lm)[, c(4, 5)]),
as.matrix(anova(Mg_foliar_lm)[, c(4, 5)]),
as.matrix(anova(Al_foliar_lm)[, c(4, 5)]),
as.matrix(anova(Zn_foliar_lm)[, c(4, 5)])),
'tables/foliar_inorganics.csv')
(summary(emmeans(P_foliar_lm, ~fire))[1,2] - summary(emmeans(P_foliar_lm, ~fire))[2,2])/ summary(emmeans(P_foliar_lm, ~fire))[2,2]
(summary(emmeans(K_foliar_lm, ~fire))[1,2] - summary(emmeans(K_foliar_lm, ~fire))[2,2])/ summary(emmeans(K_foliar_lm, ~fire))[2,2]
(summary(emmeans(Ca_foliar_lm, ~elevation_fac))[1,2] - summary(emmeans(Ca_foliar_lm, ~elevation_fac))[2,2])/ summary(emmeans(Ca_foliar_lm, ~elevation_fac))[2,2]
(summary(emmeans(Zn_foliar_lm, ~elevation_fac))[1,2] - summary(emmeans(Zn_foliar_lm, ~elevation_fac))[2,2])/ summary(emmeans(Zn_foliar_lm, ~elevation_fac))[2,2]
cbind(as.matrix(anova(height_lm)[, c(1, 4, 5)]),
as.matrix(anova(canopy_lm)[, c(4, 5)]),
as.matrix(anova(diam_lm)[, c(4, 5)]))
write.csv(cbind(as.matrix(anova(height_lm)[, c(1, 4, 5)]),
as.matrix(anova(canopy_lm)[, c(4, 5)]),
as.matrix(anova(diam_lm)[, c(4, 5)])),
'tables/allometry.csv')
(summary(emmeans(canopy_lm, ~elevation_fac))[1,2] - summary(emmeans(canopy_lm, ~elevation_fac))[2,2])/ summary(emmeans(canopy_lm, ~elevation_fac))[2,2]
library(tidyverse)
library(emmeans)
library(lme4)
library(car)
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
## read in cleaned data
data = read.csv('../data/mdi_all_clean.csv')
data$CN_foliar = data$C_foliar/data$N_foliar
data$CN_soil = data$C_soil/data$N_soil
data$fire[data$Name == 'CAD'] = 'fire'
data$fire[data$Name == 'CADCLIFFS'] = 'fire'
data$fire[data$Name == 'STSAUV'] = 'no fire'
data$fire[data$Name == 'WOND'] = 'no fire'
head(data)
data_density = read.csv('../data/mdi_stand_density.csv')
data_density$fire[data_density$Name == 'CAD'] = 'fire'
data_density$fire[data_density$Name == 'CADCLIFFS'] = 'fire'
data_density$fire[data_density$Name == 'STSAUV'] = 'no fire'
data_density$fire[data_density$Name == 'WOND'] = 'no fire'
data_density$fire[data_density$site == 'CAD'] = 'fire'
data_density$fire[data_density$site == 'CADCLIFFS'] = 'fire'
data_density$fire[data_density$site == 'STSAUV'] = 'no fire'
data_density$fire[data_density$site == 'WOND'] = 'no fire'
### density
head(data_density)
data = read.csv('../data/mdi_all_clean.csv')
data$CN_foliar = data$C_foliar/data$N_foliar
data$CN_soil = data$C_soil/data$N_soil
data$fire[data$Name == 'CAD'] = 'fire'
data$fire[data$Name == 'CADCLIFFS'] = 'fire'
data$fire[data$Name == 'STSAUV'] = 'no fire'
data$fire[data$Name == 'WOND'] = 'no fire'
head(data)
head(data)
data_group_by_Name = group_by(data, Name)
data_Name_means = summarise(data_group_by_Name,
Elevation_mean = mean(Elevation, na.rm = T),
Slope_mean = mean(Slope, na.rm = T),
Aspect_mean = mean(Aspect, na.rm = T))
## create an elevation factor
data$elevation_fac[data$site == 'CAD' | data$Name == 'STSAUV'] = 'high'
## create an elevation factor
data$elevation_fac[data$Name == 'CAD' | data$Name == 'STSAUV'] = 'high'
data$elevation_fac[data$Name == 'CADCLIFFS' | data$Name == 'WOND'] = 'low'
data_density$elevation_fac[data_density$site == 'CAD' | data_density$site == 'STSAUV'] = 'high'
data_density$elevation_fac[data_density$site == 'CADCLIFFS' | data_density$site == 'WOND'] = 'low'
ind_variables = c('elevation_fac', 'fire')
dep_variables = c("log(Elevation)", "log(height)", "log(canopy)", "log(diam)",
"d13C", "d15N", "C_foliar", "N_foliar", "CN_foliar", "Ca_foliar", "log(P_foliar)",
"log(K_foliar)", "Mg_foliar", "Al_foliar", "log(Zn_foliar)",
"Ca_soil", "log(P_soil)", "K_soil", "Mg_soil", "log(Al_soil)", "log(Zn_soil)",
"pH", "CEC", "C_soil", "N_soil", "log(CN_soil)", "asin(sqrt(0.01 * retention))")
### density
head(data_density)
#plot(resid(retention_lm) ~ fitted(retention_lm))
anova(retention_lm)
### retention
retention_lm = lm(as.formula(paste(dep_variables[27],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(retention_lm) ~ fitted(retention_lm))
anova(retention_lm)
density_lm = lm(mean_distance ~ elevation_fac * fire, data = data_density)
plot(resid(density_lm) ~ fitted(density_lm))
#plot(resid(density_lm) ~ fitted(density_lm))
anova(density_lm)
cld(emmeans(density_lm, ~elevation_fac * fire))
ggplot(data = data_density, aes(x = site, y = (mean_distance))) +
geom_boxplot()
ggplot(data = data_density, aes(x = elevation_fac * fire, y = (mean_distance))) +
geom_boxplot()
ggplot(data = data_density, aes(x = elevation_fac : fire, y = (mean_distance))) +
geom_boxplot()
ggplot(data = data_density, aes(x = site, y = (mean_distance))) +
geom_boxplot()
as.matrix(anova(density_lm)[, c(1, 4, 5)]
as.matrix(anova(density_lm)[, c(1, 4, 5)])
anova(density_lm)
anova(density_lm)[, c(1, 4, 5)]
anova(density_lm)[, c(1, 4, 5)]
(summary(emmeans(density_lm, ~elevation_fac))[1,2] - summary(emmeans(density_lm, ~elevation_fac))[2,2])/ summary(emmeans(density_lm, ~elevation_fac))[2,2]
emmeans(density_lm, ~elevation_fac)
write.csv(anova(density_lm)[, c(1, 4, 5)],
'tables/density.csv')
library(tidyverse)
library(emmeans)
library(lme4)
library(car)
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
## read in cleaned data
data = read.csv('../data/mdi_all_clean.csv')
data$CN_foliar = data$C_foliar/data$N_foliar
data$CN_soil = data$C_soil/data$N_soil
data$fire[data$Name == 'CAD'] = 'fire'
data$fire[data$Name == 'CADCLIFFS'] = 'fire'
data$fire[data$Name == 'STSAUV'] = 'no fire'
data$fire[data$Name == 'WOND'] = 'no fire'
head(data)
data_density = read.csv('../data/mdi_stand_density.csv')
data_density$fire[data_density$site == 'CAD'] = 'fire'
data_density$fire[data_density$site == 'CADCLIFFS'] = 'fire'
data_density$fire[data_density$site == 'STSAUV'] = 'no fire'
data_density$fire[data_density$site == 'WOND'] = 'no fire'
## site means
data_group_by_Name = group_by(data, Name)
data_Name_means = summarise(data_group_by_Name,
Elevation_mean = mean(Elevation, na.rm = T),
Slope_mean = mean(Slope, na.rm = T),
Aspect_mean = mean(Aspect, na.rm = T))
## create an elevation factor
data$elevation_fac[data$Name == 'CAD' | data$Name == 'STSAUV'] = 'high'
data$elevation_fac[data$Name == 'CADCLIFFS' | data$Name == 'WOND'] = 'low'
data_density$elevation_fac[data_density$site == 'CAD' | data_density$site == 'STSAUV'] = 'high'
data_density$elevation_fac[data_density$site == 'CADCLIFFS' | data_density$site == 'WOND'] = 'low'
## create a generic variable set to pass to formula argument
ind_variables = c('elevation_fac', 'fire')
dep_variables = c("log(Elevation)", "log(height)", "log(canopy)", "log(diam)",
"d13C", "d15N", "C_foliar", "N_foliar", "CN_foliar", "Ca_foliar", "log(P_foliar)",
"log(K_foliar)", "Mg_foliar", "Al_foliar", "log(Zn_foliar)",
"Ca_soil", "log(P_soil)", "K_soil", "Mg_soil", "log(Al_soil)", "log(Zn_soil)",
"pH", "CEC", "C_soil", "N_soil", "log(CN_soil)", "asin(sqrt(0.01 * retention))")
### elevation
Elevation_lm = lm(as.formula(paste(log(Elevation),
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
### elevation
Elevation_lm = lm(as.formula(paste("log(Elevation)",
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(Elevation_lm) ~ fitted(Elevation_lm))
Anova(Elevation_lm)
cld(emmeans(Elevation_lm, ~elevation_fac * fire))
ggplot(data = data, aes(x = Name, y = log(Elevation))) +
geom_boxplot()
### slope
Slope_lm = lm(as.formula(paste("log(Slope)",
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
head(data)
### slope
Slope_lm = lm(as.formula(paste("Slope",
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(Elevation_lm) ~ fitted(Elevation_lm))
Anova(Elevation_lm)
plot(resid(Slope_lm) ~ fitted(Slope_lm))
cld(emmeans(Slope_lm, ~elevation_fac * fire))
ggplot(data = data, aes(x = Name, y = log(Slope))) +
geom_boxplot()
install.packages('circular')
library(circular)
### aspect
Aspect_lm = lm.cicular(as.formula(paste("Aspect",
paste(ind_variables, collapse = "*"),
sep = "~")), type = "c-l", data = data)
### aspect
Aspect_lm = lm.circular(as.formula(paste("Aspect",
paste(ind_variables, collapse = "*"),
sep = "~")), type = "c-l", data = data)
### aspect
Aspect_lm = lm.circular(c(data$elevation_fac, data$fire),
data$Aspect, type = "c-l")
data$fire
data$elevation_fac
data$Aspect
### aspect
Aspect_lm = lm.circular(data$fire,
data$Aspect, type = "c-l")
### aspect
Aspect_lm = lm.circular(data$fire,
data$Aspect, type = "c-l", init = NULL)
data$Aspect
data$Slope
data$Name
data[,c(1:3)]
data$Aspect
library(tidyverse)
library(emmeans)
library(lme4)
library(car)
library(circular)
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
## read in cleaned data
data = read.csv('../data/mdi_all_clean.csv')
data$CN_foliar = data$C_foliar/data$N_foliar
data$CN_soil = data$C_soil/data$N_soil
data$fire[data$Name == 'CAD'] = 'fire'
data$fire[data$Name == 'CADCLIFFS'] = 'fire'
data$fire[data$Name == 'STSAUV'] = 'no fire'
data$fire[data$Name == 'WOND'] = 'no fire'
head(data)
data_density = read.csv('../data/mdi_stand_density.csv')
data_density$fire[data_density$site == 'CAD'] = 'fire'
data_density$fire[data_density$site == 'CADCLIFFS'] = 'fire'
data_density$fire[data_density$site == 'STSAUV'] = 'no fire'
data_density$fire[data_density$site == 'WOND'] = 'no fire'
## site means
data_group_by_Name = group_by(data, Name)
data_Name_means = summarise(data_group_by_Name,
Elevation_mean = mean(Elevation, na.rm = T),
Slope_mean = mean(Slope, na.rm = T),
Aspect_mean = mean(Aspect, na.rm = T))
## create an elevation factor
data$elevation_fac[data$Name == 'CAD' | data$Name == 'STSAUV'] = 'high'
data$elevation_fac[data$Name == 'CADCLIFFS' | data$Name == 'WOND'] = 'low'
data_density$elevation_fac[data_density$site == 'CAD' | data_density$site == 'STSAUV'] = 'high'
data_density$elevation_fac[data_density$site == 'CADCLIFFS' | data_density$site == 'WOND'] = 'low'
## create a generic variable set to pass to formula argument
ind_variables = c('elevation_fac', 'fire')
dep_variables = c("log(Elevation)", "log(height)", "log(canopy)", "log(diam)",
"d13C", "d15N", "C_foliar", "N_foliar", "CN_foliar", "Ca_foliar", "log(P_foliar)",
"log(K_foliar)", "Mg_foliar", "Al_foliar", "log(Zn_foliar)",
"Ca_soil", "log(P_soil)", "K_soil", "Mg_soil", "log(Al_soil)", "log(Zn_soil)",
"pH", "CEC", "C_soil", "N_soil", "log(CN_soil)", "asin(sqrt(0.01 * retention))")
## fit models and explore results
### elevation
Elevation_lm = lm(as.formula(paste("log(Elevation)",
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(Elevation_lm) ~ fitted(Elevation_lm))
Anova(Elevation_lm)
cld(emmeans(Elevation_lm, ~elevation_fac * fire))
data$Elevation
ggplot(data = data, aes(x = Name, y = log(Elevation))) +
geom_boxplot()
### slope
Slope_lm = lm(as.formula(paste("Slope",
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(Slope_lm) ~ fitted(Slope_lm))
Anova(Slope_lm)
cld(emmeans(Slope_lm, ~elevation_fac * fire))
ggplot(data = data, aes(x = Name, y = log(Slope))) +
geom_boxplot()
### aspect
Aspect_lm = lm.circular(data$fire,
data$Aspect, type = "c-l", init = NULL)
Aspect_lm
### aspect
Aspect_lm = lm.circular(data$fire,
data$Aspect, type = "c-l")
install.packages(circglmbayes)
install.packages('circglmbayes')
### aspect
Aspect_lm = lm(as.formula(paste("Aspect",
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
plot(resid(Aspect_lm) ~ fitted(Aspect_lm))
#plot(resid(Aspect_lm) ~ fitted(Aspect_lm))
Anova(Aspect_lm)
cld(emmeans(Aspect_lm, ~elevation_fac * fire))
ggplot(data = data, aes(x = Name, y = Slope)) +
geom_boxplot()
ggplot(data = data, aes(x = Name, y = Aspect)) +
geom_boxplot()
cld(emmeans(Aspect_lm, ~elevation_fac * fire))
### aspect
#### aspect CAD
aspect_CAD = data[Name == 'CAD']$Aspect
### aspect
#### aspect CAD
aspect_CAD = data[data$Name == 'CAD']$Aspect
data[data$Name == 'CAD']
### aspect
#### aspect CAD
aspect_CAD = data$Aspect[data$Name == 'CAD']
aspect_CAD
### aspect
#### aspect CAD
aspect_CAD = data$Aspect[data$Name == 'CAD']
aspect_CADCLIFFS = data$Aspect[data$Name == 'CADCLIFFS']
aspect_STSAUV = data$Aspect[data$Name == 'STSAUV']
aspect_WOND = data$Aspect[data$Name == 'WOND']
aspect_CAD
aspect_CADCLIFFS
aspect_STSAUV
aspect_WOND
### aspect
#### aspect CAD
aspect_CAD = circular(data$Aspect[data$Name == 'CAD'],
units="degrees", template="geographics")
aspect_CAD
aspect_CADCLIFFS = circular(data$Aspect[data$Name == 'CADCLIFFS'],
units="degrees", template="geographics")
aspect_STSAUV = circular(data$Aspect[data$Name == 'STSAUV'],
units="degrees", template="geographics")
aspect_WOND = circular(data$Aspect[data$Name == 'WOND'],
units="degrees", template="geographics")
watson.two.test(aspect_CAD, aspect_CADCLIFFS)
watson.two.test(aspect_CAD, aspect_STSAUV)
watson.two.test(aspect_CAD, aspect_WOND)
watson.two.test(aspect_CADCLIFFS, aspect_STSAUV)
watson.two.test(aspect_CADCLIFFS, aspect_WOND)
watson.two.test(aspect_STSAUV, aspect_WOND)
?watson.test
watson.two.test(aspect_CAD, aspect_CADCLIFFS)
watson.two.test(aspect_CAD, aspect_STSAUV) #
watson.two.test(aspect_CAD, aspect_WOND)
watson.two.test(aspect_CADCLIFFS, aspect_STSAUV)
watson.two.test(aspect_CADCLIFFS, aspect_WOND)
watson.two.test(aspect_STSAUV, aspect_WOND)
watson.two.test(aspect_STSAUV, aspect_WOND) # P <0.01
