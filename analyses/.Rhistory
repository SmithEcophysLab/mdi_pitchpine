# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
jpeg(filename = "plots/height_plot.jpeg", width = 900, height = 900, units = 'px')
multiplot(height_plot, height_plot_elevation, cols = 2)
dev.off()
jpeg(filename = "plots/height_plot.jpeg", width = 1000, height = 800, units = 'px')
multiplot(height_plot, height_plot_elevation, cols = 2)
dev.off()
jpeg(filename = "plots/height_plot.jpeg", width = 1000, height = 600, units = 'px')
multiplot(height_plot, height_plot_elevation, cols = 2)
dev.off()
canopy_plot = ggplot(data = data, aes(x = Name, y = log(canopy))) +
theme(legend.position = "none",
axis.title.y=element_text(size=rel(2.5), colour = 'black'),
axis.title.x=element_text(size=rel(2.5), colour = 'black'),
axis.text.x=element_text(size=rel(2), colour = 'black'),
axis.text.y=element_text(size=rel(2), colour = 'black'),
panel.background = element_rect(fill = 'white', colour = 'black'),
panel.grid.major = element_line(colour = "grey")) +
geom_boxplot(outlier.color = NA, fill = 'white') +
geom_dotplot(binaxis = 'y', binwidth = 0.07, stackdir = 'center', alpha = 0.5) +
# scale_x_discrete(labels = c('Ambient', 'Added N')) +
xlab('Site') +
ylab(expression('ln(Canopy)'))
canopy_plot_elevation = ggplot(data = data, aes(x = Elevation, y = log(canopy), col = fire)) +
theme(legend.position = "right",
axis.title.y=element_text(size=rel(2.5), colour = 'black'),
axis.title.x=element_text(size=rel(2.5), colour = 'black'),
axis.text.x=element_text(size=rel(2), colour = 'black'),
axis.text.y=element_text(size=rel(2), colour = 'black'),
panel.background = element_rect(fill = 'white', colour = 'black'),
panel.grid.major = element_line(colour = "grey")) +
geom_point(size = 3) +
ylab(expression('ln(canopy)'))
jpeg(filename = "plots/canopy_plot.jpeg", width = 1000, canopy = 600, units = 'px')
multiplot(canopy_plot, canopy_plot_elevation, cols = 2)
dev.off()
jpeg(filename = "plots/canopy_plot.jpeg", width = 1000, canopy = 600, units = 'px')
jpeg(filename = "plots/canopy_plot.jpeg", width = 1000, height = 600, units = 'px')
multiplot(canopy_plot, canopy_plot_elevation, cols = 2)
dev.off()
canopy_plot = ggplot(data = data, aes(x = Name, y = log(canopy), col = fire)) +
theme(legend.position = "none",
axis.title.y=element_text(size=rel(2.5), colour = 'black'),
axis.title.x=element_text(size=rel(2.5), colour = 'black'),
axis.text.x=element_text(size=rel(2), colour = 'black'),
axis.text.y=element_text(size=rel(2), colour = 'black'),
panel.background = element_rect(fill = 'white', colour = 'black'),
panel.grid.major = element_line(colour = "grey")) +
geom_boxplot(outlier.color = NA, fill = 'white') +
geom_dotplot(binaxis = 'y', binwidth = 0.07, stackdir = 'center', alpha = 0.5) +
# scale_x_discrete(labels = c('Ambient', 'Added N')) +
xlab('Site') +
ylab(expression('ln(Canopy)'))
canopy_plot
canopy_plot
canopy_plot
canopy_plot = ggplot(data = data, aes(x = Name, y = log(canopy), col = fire)) +
theme(legend.position = "none",
axis.title.y=element_text(size=rel(2.5), colour = 'black'),
axis.title.x=element_text(size=rel(2.5), colour = 'black'),
axis.text.x=element_text(size=rel(2), colour = 'black'),
axis.text.y=element_text(size=rel(2), colour = 'black'),
panel.background = element_rect(fill = 'white', colour = 'black'),
panel.grid.major = element_line(colour = "grey")) +
geom_boxplot(outlier.color = NA, fill = 'white') +
geom_dotplot(binaxis = 'y', binwidth = 0.07, stackdir = 'center', alpha = 0.5) +
# scale_x_discrete(labels = c('Ambient', 'Added N')) +
xlab('Site') +
ylab(expression('ln(Canopy)'))
canopy_plot_elevation = ggplot(data = data, aes(x = Elevation, y = log(canopy), col = fire)) +
theme(legend.position = "right",
axis.title.y=element_text(size=rel(2.5), colour = 'black'),
axis.title.x=element_text(size=rel(2.5), colour = 'black'),
axis.text.x=element_text(size=rel(2), colour = 'black'),
axis.text.y=element_text(size=rel(2), colour = 'black'),
panel.background = element_rect(fill = 'white', colour = 'black'),
panel.grid.major = element_line(colour = "grey")) +
geom_point(size = 3) +
ylab(expression('ln(canopy)'))
jpeg(filename = "plots/canopy_plot.jpeg", width = 1000, height = 600, units = 'px')
multiplot(canopy_plot, canopy_plot_elevation, cols = 2)
dev.off()
height_plot = ggplot(data = data, aes(x = Name, y = log(height), col = fire)) +
theme(legend.position = "none",
axis.title.y=element_text(size=rel(2.5), colour = 'black'),
axis.title.x=element_text(size=rel(2.5), colour = 'black'),
axis.text.x=element_text(size=rel(2), colour = 'black'),
axis.text.y=element_text(size=rel(2), colour = 'black'),
panel.background = element_rect(fill = 'white', colour = 'black'),
panel.grid.major = element_line(colour = "grey")) +
geom_boxplot(outlier.color = NA, fill = 'white') +
geom_dotplot(binaxis = 'y', binwidth = 0.07, stackdir = 'center', alpha = 0.5) +
# scale_x_discrete(labels = c('Ambient', 'Added N')) +
xlab('Site') +
ylab(expression('ln(Height)'))
height_plot_elevation = ggplot(data = data, aes(x = Elevation, y = log(height), col = fire)) +
theme(legend.position = "right",
axis.title.y=element_text(size=rel(2.5), colour = 'black'),
axis.title.x=element_text(size=rel(2.5), colour = 'black'),
axis.text.x=element_text(size=rel(2), colour = 'black'),
axis.text.y=element_text(size=rel(2), colour = 'black'),
panel.background = element_rect(fill = 'white', colour = 'black'),
panel.grid.major = element_line(colour = "grey")) +
geom_point(size = 6) +
ylab(expression('ln(Height)'))
jpeg(filename = "plots/height_plot.jpeg", width = 1000, height = 600, units = 'px')
multiplot(height_plot, height_plot_elevation, cols = 2)
dev.off()
canopy_plot = ggplot(data = data, aes(x = Name, y = log(canopy), col = fire)) +
theme(legend.position = "none",
axis.title.y=element_text(size=rel(2.5), colour = 'black'),
axis.title.x=element_text(size=rel(2.5), colour = 'black'),
axis.text.x=element_text(size=rel(2), colour = 'black'),
axis.text.y=element_text(size=rel(2), colour = 'black'),
panel.background = element_rect(fill = 'white', colour = 'black'),
panel.grid.major = element_line(colour = "grey")) +
geom_boxplot(outlier.color = NA, fill = 'white') +
geom_dotplot(binaxis = 'y', binwidth = 0.07, stackdir = 'center', alpha = 0.5) +
# scale_x_discrete(labels = c('Ambient', 'Added N')) +
xlab('Site') +
ylab(expression('ln(Canopy)'))
canopy_plot_elevation = ggplot(data = data, aes(x = Elevation, y = log(canopy), col = fire)) +
theme(legend.position = "right",
axis.title.y=element_text(size=rel(2.5), colour = 'black'),
axis.title.x=element_text(size=rel(2.5), colour = 'black'),
axis.text.x=element_text(size=rel(2), colour = 'black'),
axis.text.y=element_text(size=rel(2), colour = 'black'),
panel.background = element_rect(fill = 'white', colour = 'black'),
panel.grid.major = element_line(colour = "grey")) +
geom_point(size = 6) +
ylab(expression('ln(canopy)'))
jpeg(filename = "plots/canopy_plot.jpeg", width = 1000, height = 600, units = 'px')
multiplot(canopy_plot, canopy_plot_elevation, cols = 2)
dev.off()
Anova(canopy_lmer_cont)
diam_plot = ggplot(data = data, aes(x = Name, y = log(diam), col = fire)) +
theme(legend.position = "none",
axis.title.y=element_text(size=rel(2.5), colour = 'black'),
axis.title.x=element_text(size=rel(2.5), colour = 'black'),
axis.text.x=element_text(size=rel(2), colour = 'black'),
axis.text.y=element_text(size=rel(2), colour = 'black'),
panel.background = element_rect(fill = 'white', colour = 'black'),
panel.grid.major = element_line(colour = "grey")) +
geom_boxplot(outlier.color = NA, fill = 'white') +
geom_dotplot(binaxis = 'y', binwidth = 0.07, stackdir = 'center', alpha = 0.5) +
# scale_x_discrete(labels = c('Ambient', 'Added N')) +
xlab('Site') +
ylab(expression('ln(Diameter)'))
diam_plot_elevation = ggplot(data = data, aes(x = Elevation, y = log(diam), col = fire)) +
theme(legend.position = "right",
axis.title.y=element_text(size=rel(2.5), colour = 'black'),
axis.title.x=element_text(size=rel(2.5), colour = 'black'),
axis.text.x=element_text(size=rel(2), colour = 'black'),
axis.text.y=element_text(size=rel(2), colour = 'black'),
panel.background = element_rect(fill = 'white', colour = 'black'),
panel.grid.major = element_line(colour = "grey")) +
geom_point(size = 6) +
ylab(expression('ln(Diameter)'))
jpeg(filename = "plots/diam_plot.jpeg", width = 1000, height = 600, units = 'px')
multiplot(diam_plot, diam_plot_elevation, cols = 2)
dev.off()
Anova(diam_lmer_cont)
# script to analyze mdi pitch pine data
library(tidyverse)
library(emmeans)
library(lme4)
library(car)
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
## read in cleaned data
data = read.csv('../data/mdi_all_clean.csv')
data$CN_foliar = data$C_foliar/data$N_foliar
data$CN_soil = data$C_soil/data$N_soil
data$fire[data$Name == 'CAD'] = 'fire'
data$fire[data$Name == 'CADCLIFFS'] = 'fire'
data$fire[data$Name == 'STSAUV'] = 'no fire'
data$fire[data$Name == 'WOND'] = 'no fire'
head(data)
## site means
data_group_by_Name = group_by(data, Name)
data_Name_means = summarise(data_group_by_Name,
Elevation_mean = mean(Elevation, na.rm = T),
Slope_mean = mean(Slope, na.rm = T),
Aspect_mean = mean(Aspect, na.rm = T))
## fit models and explore results
### elevation
Elevation_lm = lm(log(Elevation) ~ Name, data = data)
#plot(resid(Elevation_lm) ~ fitted(Elevation_lm))
Anova(Elevation_lm)
cld(emmeans(Elevation_lm, ~Name), alpha = 0.1)
### height
height_lm = lm(log(height) ~ Name, data = data)
#plot(resid(height_lm) ~ fitted(height_lm))
Anova(height_lm)
cld(emmeans(height_lm, ~Name), alpha = 0.1)
height_lmer_cont = lmer(log(height) ~ Elevation * fire + (1|Name), data = data)
Anova(height_lmer_cont)
test(emtrends(height_lmer_cont, ~fire, var = 'Elevation'))
# script to analyze mdi pitch pine data
library(tidyverse)
library(emmeans)
library(lme4)
library(car)
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
## read in cleaned data
data = read.csv('../data/mdi_all_clean.csv')
data$CN_foliar = data$C_foliar/data$N_foliar
data$CN_soil = data$C_soil/data$N_soil
data$fire[data$Name == 'CAD'] = 'fire'
data$fire[data$Name == 'CADCLIFFS'] = 'fire'
data$fire[data$Name == 'STSAUV'] = 'no fire'
data$fire[data$Name == 'WOND'] = 'no fire'
head(data)
## site means
data_group_by_Name = group_by(data, Name)
data_Name_means = summarise(data_group_by_Name,
Elevation_mean = mean(Elevation, na.rm = T),
Slope_mean = mean(Slope, na.rm = T),
Aspect_mean = mean(Aspect, na.rm = T))
data$Name
## create an elevation factor
data$elevation_fac[data$Name == 'CAD' | data$Name == 'STSAUV'] = 'high'
data$elevation_fac[data$Name == 'CADCLIFFS' | data$Name == 'WOND'] = 'low'
data$elevation_fac
### elevation
Elevation_lm = lm(log(Elevation) ~ elevation_fac, data = data)
#plot(resid(Elevation_lm) ~ fitted(Elevation_lm))
Anova(Elevation_lm)
cld(emmeans(Elevation_lm, ~elevation_fac), alpha = 0.1)
cld(emmeans(Elevation_lm, ~elevation_fac))
plot(resid(Elevation_lm) ~ fitted(Elevation_lm))
### height
height_lm = lm(log(height) ~ elevation_fac * fire, data = data)
#plot(resid(height_lm) ~ fitted(height_lm))
Anova(height_lm)
cld(emmeans(height_lm, ~elevation_fac * fire), alpha = 0.1)
?lm
### height
height_lm = lm(as.formula(paste(log(height),
paste(variables, collapse = "+"),
sep = "~")),
data = data)
### height
height_lm = lm(as.formula(paste("log(height)",
paste(variables, collapse = "+"),
sep = "~")), data = data)
## create a generic variable set to pass to formula argument
variables = c('elevation_fac', 'fire')
### height
height_lm = lm(as.formula(paste("log(height)",
paste(variables, collapse = "+"),
sep = "~")), data = data)
#plot(resid(height_lm) ~ fitted(height_lm))
Anova(height_lm)
### height
height_lm = lm(as.formula(paste("log(height)",
paste(variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(height_lm) ~ fitted(height_lm))
Anova(height_lm)
cld(emmeans(height_lm, ~elevation_fac * fire), alpha = 0.05)
cld(emmeans(Elevation_lm, ~elevation_fac))
### elevation
Elevation_lm = lm((as.formula(paste("log(Elevation)",
sep = "~")), data = data)
### height
height_lm = lm(as.formula(paste("log(height)",
paste(variables, collapse = "*"),
sep = "~")), data = data)
### elevation
Elevation_lm = lm(as.formula(paste("log(Elevation)",
paste(variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(Elevation_lm) ~ fitted(Elevation_lm))
Anova(Elevation_lm)
cld(emmeans(Elevation_lm, ~elevation_fac * fire))
dep_variables = c("log(Elevation)", "log(height)", "log(canopy)", "log(Elevation)", "log(diam)",
"d13C", "d15N", "C_foliar", "N_foliar", "CN_foliar", "Ca_foliar", "log(P_foliar)",
"log(K_foliar)", "Mg_foliar", "Al_foliar", "log(Zn_foliar)",
"Ca_soil", "log(P_soil)", "K_soil", "Mg_soil", "log(Zn_soil)",
"pH", "CEC", "C_soil", "N_soil", "log(CN_soil)", "asin(sqrt(0.01 * retention))")
### elevation
Elevation_lm = lm(as.formula(dep_variables[1],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
### elevation
Elevation_lm = lm(as.formula(paste(dep_variables[1],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
## create a generic variable set to pass to formula argument
ind_variables = c('elevation_fac', 'fire')
dep_variables = c("log(Elevation)", "log(height)", "log(canopy)", "log(Elevation)", "log(diam)",
"d13C", "d15N", "C_foliar", "N_foliar", "CN_foliar", "Ca_foliar", "log(P_foliar)",
"log(K_foliar)", "Mg_foliar", "Al_foliar", "log(Zn_foliar)",
"Ca_soil", "log(P_soil)", "K_soil", "Mg_soil", "log(Zn_soil)",
"pH", "CEC", "C_soil", "N_soil", "log(CN_soil)", "asin(sqrt(0.01 * retention))")
### elevation
Elevation_lm = lm(as.formula(paste(dep_variables[1],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(Elevation_lm) ~ fitted(Elevation_lm))
Anova(Elevation_lm)
### canopy
canopy_lm = lm(as.formula(paste(dep_variables[3],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(canopy_lm) ~ fitted(canopy_lm))
anova(canopy_lm)
### diam
diam_lm = lm(as.formula(paste(dep_variables[4],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
dep_variables[4]
dep_variables
dep_variables = c("log(Elevation)", "log(height)", "log(canopy)", "log(diam)",
"d13C", "d15N", "C_foliar", "N_foliar", "CN_foliar", "Ca_foliar", "log(P_foliar)",
"log(K_foliar)", "Mg_foliar", "Al_foliar", "log(Zn_foliar)",
"Ca_soil", "log(P_soil)", "K_soil", "Mg_soil", "log(Zn_soil)",
"pH", "CEC", "C_soil", "N_soil", "log(CN_soil)", "asin(sqrt(0.01 * retention))")
### diam
diam_lm = lm(as.formula(paste(dep_variables[4],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
diam_lm
dep_variables[4]
#plot(resid(diam_lm) ~ fitted(diam_lm))
anova(diam_lm)
dep_variables[5]
### d13C
d13C_lm = lm(as.formula(paste(dep_variables[5],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(d13C_lm) ~ fitted(d13C_lm))
anova(d13C_lm)
### d15N
d15N_lm = lm(as.formula(paste(dep_variables[6],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
d15N_lm
dep_variables[6]
dep_variables[7]
dep_variables[8]
dep_variables[9]
dep_variables[10]
dep_variables[11]
dep_variables[16]
dep_variables[22]
dep_variables[20]
dep_variables[18]
dep_variables[19]
dep_variables[20]
dep_variables = c("log(Elevation)", "log(height)", "log(canopy)", "log(diam)",
"d13C", "d15N", "C_foliar", "N_foliar", "CN_foliar", "Ca_foliar", "log(P_foliar)",
"log(K_foliar)", "Mg_foliar", "Al_foliar", "log(Zn_foliar)",
"Ca_soil", "log(P_soil)", "K_soil", "Mg_soil", "log(Al_soil)", "log(Zn_soil)",
"pH", "CEC", "C_soil", "N_soil", "log(CN_soil)", "asin(sqrt(0.01 * retention))")
dep_variables[19]
dep_variables[20]
dep_variables[21]
dep_variables[22]
dep_variables[27]
### retention
retention_lm = lm(as.formula(paste(dep_variables[27],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(retention_lm) ~ fitted(retention_lm))
anova(retention_lm)
### d15N
d15N_lm = lm(as.formula(paste(dep_variables[6],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(d15N_lm) ~ fitted(d15N_lm))
anova(d15N_lm)
cld(emmeans(d15N_lm, ~elevation_fac * fire))
### height
height_lm = lm(as.formula(paste(dep_variables[2],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(height_lm) ~ fitted(height_lm))
Anova(height_lm)
cld(emmeans(height_lm, ~elevation_fac * fire))
### canopy
canopy_lm = lm(as.formula(paste(dep_variables[3],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(canopy_lm) ~ fitted(canopy_lm))
anova(canopy_lm)
### diam
diam_lm = lm(as.formula(paste(dep_variables[4],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(diam_lm) ~ fitted(diam_lm))
anova(diam_lm)
cld(emmeans(diam_lm, ~elevation_fac * fire))
### d13C
d13C_lm = lm(as.formula(paste(dep_variables[5],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(d13C_lm) ~ fitted(d13C_lm))
anova(d13C_lm)
### d15N
d15N_lm = lm(as.formula(paste(dep_variables[6],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(d15N_lm) ~ fitted(d15N_lm))
anova(d15N_lm)
### N_foliar
N_foliar_lm = lm(as.formula(paste(dep_variables[8],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(N_foliar_lm) ~ fitted(N_foliar_lm))
anova(N_foliar_lm)
ggplot(data = subset(data, N_foliar < 5), aes(x = Name, y = (N_foliar))) +
geom_boxplot()
### CN_foliar
CN_foliar_lm = lm(as.formula(paste(dep_variables[9],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(CN_foliar_lm) ~ fitted(CN_foliar_lm))
anova(CN_foliar_lm)
### P_foliar
P_foliar_lm = lm(as.formula(paste(dep_variables[11],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(P_foliar_lm) ~ fitted(P_foliar_lm))
anova(P_foliar_lm)
cld(emmeans(P_foliar_lm, ~elevation_fac * fire))
### K_foliar
K_foliar_lm = lm(as.formula(paste(dep_variables[12],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(K_foliar_lm) ~ fitted(K_foliar_lm))
anova(K_foliar_lm)
cld(emmeans(K_foliar_lm, ~elevation_fac * fire))
### pH
pH_lm = lm(as.formula(paste(dep_variables[22],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(pH_lm) ~ fitted(pH_lm))
anova(pH_lm)
### CEC
CEC_lm = lm(as.formula(paste(dep_variables[23],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(CEC_lm) ~ fitted(CEC_lm))
anova(CEC_lm)
cld(emmeans(CEC_lm, ~elevation_fac * fire))
### CN_soil
CN_soil_lm = lm(as.formula(paste(dep_variables[26],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(CN_soil_lm) ~ fitted(CN_soil_lm))
anova(CN_soil_lm)
cld(emmeans(CN_soil_lm, ~elevation_fac * fire))
### retention
retention_lm = lm(as.formula(paste(dep_variables[27],
paste(ind_variables, collapse = "*"),
sep = "~")), data = data)
#plot(resid(retention_lm) ~ fitted(retention_lm))
anova(retention_lm)
cld(emmeans(retention_lm, ~elevation_fac * fire))
